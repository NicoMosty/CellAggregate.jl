using CSV: read, write
using DataFrames
using NearestNeighbors
using LinearAlgebra: norm
include("init/forces.jl")

X = [-3.59 -0.58 -2.45 2.567 1
-1.59 -0.58 -2.45 2.931 1
-2.59 1.15 -2.45 2.752 1
-4.59 -1.15 -0.82 2.06 1
-2.59 -1.15 -0.82 1.498 1
-0.59 -1.15 -0.82 2.871 1
-5.59 0.58 -0.82 2.694 1
-3.59 0.58 -0.82 1.122 1
-1.59 0.58 -0.82 1.805 1
-4.59 2.31 -0.82 2.874 1
-2.59 2.31 -0.82 2.502 1
-4.59 -2.31 0.82 2.874 1
-2.59 -2.31 0.82 2.502 1
-5.59 -0.58 0.82 2.694 1
-3.59 -0.58 0.82 1.122 1
-1.59 -0.58 0.82 1.805 1
-4.59 1.15 0.82 2.06 1
-2.59 1.15 0.82 1.498 1
-0.59 1.15 0.82 2.871 1
-2.59 -1.15 2.45 2.752 1
-3.59 0.58 2.45 2.567 1
-1.59 0.58 2.45 2.931 1
2.59 -0.58 -2.45 2.567 1
4.59 -0.58 -2.45 2.931 1
3.59 1.15 -2.45 2.752 1
1.59 -1.15 -0.82 2.06 1
3.59 -1.15 -0.82 1.498 1
5.59 -1.15 -0.82 2.871 1
0.59 0.58 -0.82 2.694 1
2.59 0.58 -0.82 1.122 1
4.59 0.58 -0.82 1.805 1
1.59 2.31 -0.82 2.874 1
3.59 2.31 -0.82 2.502 1
1.59 -2.31 0.82 2.874 1
3.59 -2.31 0.82 2.502 1
0.59 -0.58 0.82 2.694 1
2.59 -0.58 0.82 1.122 1
4.59 -0.58 0.82 1.805 1
1.59 1.15 0.82 2.06 1
3.59 1.15 0.82 1.498 1
5.59 1.15 0.82 2.871 1
3.59 -1.15 2.45 2.752 1
2.59 0.58 2.45 2.567 1
4.59 0.58 2.45 2.931 1]

dt = 0.1
t = 0
t_knn = 2
r_max = 2
s = 1
K = 10

function euler(X, dt, t, t_knn, force, args...)
    # Adding Graph for kNN
    if t%t_knn | t == 0
        global kdtree = KDTree(X[:,1:3]')
    end 
    # Compute differential displacements
    dX = force(X, kdtree, args...)

    # Loop over all cells to update positions and polarities
    for i in 1:size(X)[1]
        X[i] += dX[i] * dt
    end
end

euler(X, 0.1, 0, 2, force, 2, 1, 10)
println(X)

# # Loop over all cells to update positions and polarities
# for i in 1:N
#     X[i] += dX[i] * dt
# end